{"ast":null,"code":"import React, { Component } from \"react\";\n\nclass Calculator {\n  constructor(previousOperandTextElement, currentOperandTextElement) {\n    this.previousOperandTextElement = previousOperandTextElement;\n    this.currentOperandTextElement = currentOperandTextElement;\n    this.clear();\n  }\n\n  clear() {\n    this.currentOperand = '';\n    this.previousOperand = '';\n    this.operation = undefined;\n  }\n\n  delete() {\n    this.currentOperand = this.currentOperand.toString().slice(0, -1);\n  }\n\n  appendNumber(number) {\n    if (number === '.' && this.currentOperand.includes('.')) return;\n    this.currentOperand = this.currentOperand.toString() + number.toString();\n  }\n\n  chooseOperation(operation) {\n    if (this.currentOperand === '') return;\n\n    if (this.previousOperand !== '') {\n      this.compute();\n    }\n\n    this.operation = operation;\n    this.previousOperand = this.currentOperand;\n    this.currentOperand = '';\n  }\n\n  compute() {\n    let computation;\n    const prev = parseFloat(this.previousOperand);\n    const current = parseFloat(this.currentOperand);\n    if (isNaN(prev) || isNaN(current)) return;\n\n    switch (this.operation) {\n      case '+':\n        computation = prev + current;\n        break;\n\n      case '-':\n        computation = prev - current;\n        break;\n\n      case '*':\n        computation = prev * current;\n        break;\n\n      case 'รท':\n        computation = prev / current;\n        break;\n\n      default:\n        return;\n    }\n\n    this.currentOperand = computation;\n    this.operation = undefined;\n    this.previousOperand = '';\n  }\n\n  getDisplayNumber(number) {\n    const stringNumber = number.toString();\n    const integerDigits = parseFloat(stringNumber.split('.')[0]);\n    const decimalDigits = stringNumber.split('.')[1];\n    let integerDisplay;\n\n    if (isNaN(integerDigits)) {\n      integerDisplay = '';\n    } else {\n      integerDisplay = integerDigits.toLocaleString('en', {\n        maximumFractionDigits: 0\n      });\n    }\n\n    if (decimalDigits != null) {\n      return `${integerDisplay}.${decimalDigits}`;\n    } else {\n      return integerDisplay;\n    }\n  }\n\n  updateDisplay() {\n    this.currentOperandTextElement.innerText = this.getDisplayNumber(this.currentOperand);\n\n    if (this.operation != null) {\n      this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`;\n    } else {\n      this.previousOperandTextElement.innerText = '';\n    }\n  }\n\n}\n\nconst numberButtons = document.querySelectorAll('[data-number]');\nconst operationButtons = document.querySelectorAll('[data-operation]');\nconst equalsButton = document.querySelector('[data-equals]');\nconst deleteButton = document.querySelector('[data-delete]');\nconst allClearButton = document.querySelector('[data-all-clear]');\nconst previousOperandTextElement = document.querySelector('[data-previous-operand]');\nconst currentOperandTextElement = document.querySelector('[data-current-operand]');\nconst calculator = new Calculator(previousOperandTextElement, currentOperandTextElement);\nnumberButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    calculator.appendNumber(button.innerText);\n    calculator.updateDisplay();\n  });\n});\noperationButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    calculator.chooseOperation(button.innerText);\n    calculator.updateDisplay();\n  });\n});\nequalsButton.addEventListener('click', button => {\n  calculator.compute();\n  calculator.updateDisplay();\n});\nallClearButton.addEventListener('click', button => {\n  calculator.clear();\n  calculator.updateDisplay();\n});\ndeleteButton.addEventListener('click', button => {\n  calculator.delete();\n  calculator.updateDisplay();\n});\ndocument.addEventListener('keydown', function (event) {\n  let patternForNumbers = /[0-9]/g;\n  let patternForOperators = /[+\\-*\\/]/g;\n\n  if (event.key.match(patternForNumbers)) {\n    event.preventDefault();\n    calculator.appendNumber(event.key);\n    calculator.updateDisplay();\n  }\n\n  if (event.key === '.') {\n    event.preventDefault();\n    calculator.appendNumber(event.key);\n    calculator.updateDisplay();\n  }\n\n  if (event.key.match(patternForOperators)) {\n    event.preventDefault();\n    calculator.chooseOperation(event.key);\n    calculator.updateDisplay();\n  }\n\n  if (event.key === 'Enter' || event.key === '=') {\n    event.preventDefault();\n    calculator.compute();\n    calculator.updateDisplay();\n  }\n\n  if (event.key === \"Backspace\") {\n    event.preventDefault();\n    calculator.delete();\n    calculator.updateDisplay();\n  }\n\n  if (event.key == 'Delete') {\n    event.preventDefault();\n    calculator.clear();\n    calculator.updateDisplay();\n  }\n});","map":{"version":3,"sources":["/home/misani/calculator/src/main/Calculator.js"],"names":["React","Component","Calculator","constructor","previousOperandTextElement","currentOperandTextElement","clear","currentOperand","previousOperand","operation","undefined","delete","toString","slice","appendNumber","number","includes","chooseOperation","compute","computation","prev","parseFloat","current","isNaN","getDisplayNumber","stringNumber","integerDigits","split","decimalDigits","integerDisplay","toLocaleString","maximumFractionDigits","updateDisplay","innerText","numberButtons","document","querySelectorAll","operationButtons","equalsButton","querySelector","deleteButton","allClearButton","calculator","forEach","button","addEventListener","event","patternForNumbers","patternForOperators","key","match","preventDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass Calculator {\n    constructor(previousOperandTextElement, currentOperandTextElement) {\n      this.previousOperandTextElement = previousOperandTextElement\n      this.currentOperandTextElement = currentOperandTextElement\n      this.clear()\n    }\n  \n    clear() {\n      this.currentOperand = ''\n      this.previousOperand = ''\n      this.operation = undefined\n    }\n  \n    delete() {\n      this.currentOperand = this.currentOperand.toString().slice(0, -1)\n    }\n  \n    appendNumber(number) {\n      if (number === '.' && this.currentOperand.includes('.')) return\n      this.currentOperand = this.currentOperand.toString() + number.toString()\n    }\n  \n    chooseOperation(operation) {\n      if (this.currentOperand === '') return\n      if (this.previousOperand !== '') {\n        this.compute()\n      }\n      this.operation = operation\n      this.previousOperand = this.currentOperand\n      this.currentOperand = ''\n    }\n  \n    compute() {\n      let computation\n      const prev = parseFloat(this.previousOperand)\n      const current = parseFloat(this.currentOperand)\n      if (isNaN(prev) || isNaN(current)) return\n      switch (this.operation) {\n        case '+':\n          computation = prev + current\n          break\n        case '-':\n          computation = prev - current\n          break\n        case '*':\n          computation = prev * current\n          break\n        case 'รท':\n          computation = prev / current\n          break\n        default:\n          return\n      }\n      this.currentOperand = computation\n      this.operation = undefined\n      this.previousOperand = ''\n    }\n  \n    getDisplayNumber(number) {\n      const stringNumber = number.toString()\n      const integerDigits = parseFloat(stringNumber.split('.')[0])\n      const decimalDigits = stringNumber.split('.')[1]\n      let integerDisplay\n      if (isNaN(integerDigits)) {\n        integerDisplay = ''\n      } else {\n        integerDisplay = integerDigits.toLocaleString('en', { maximumFractionDigits: 0 })\n      }\n      if (decimalDigits != null) {\n        return `${integerDisplay}.${decimalDigits}`\n      } else {\n        return integerDisplay\n      }\n    }\n  \n    updateDisplay() {\n      this.currentOperandTextElement.innerText =\n        this.getDisplayNumber(this.currentOperand)\n      if (this.operation != null) {\n        this.previousOperandTextElement.innerText =\n          `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`\n      } else {\n        this.previousOperandTextElement.innerText = ''\n      }\n    }\n  }\n  \n  \n  const numberButtons = document.querySelectorAll('[data-number]')\n  const operationButtons = document.querySelectorAll('[data-operation]')\n  const equalsButton = document.querySelector('[data-equals]')\n  const deleteButton = document.querySelector('[data-delete]')\n  const allClearButton = document.querySelector('[data-all-clear]')\n  const previousOperandTextElement = document.querySelector('[data-previous-operand]')\n  const currentOperandTextElement = document.querySelector('[data-current-operand]')\n  \n  const calculator = new Calculator(previousOperandTextElement, currentOperandTextElement)\n  \n  numberButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      calculator.appendNumber(button.innerText)\n      calculator.updateDisplay()\n    })\n  })\n  \n  operationButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      calculator.chooseOperation(button.innerText)\n      calculator.updateDisplay()\n    })\n  })\n  \n  equalsButton.addEventListener('click', button => {\n    calculator.compute()\n    calculator.updateDisplay()\n  })\n  \n  allClearButton.addEventListener('click', button => {\n    calculator.clear()\n    calculator.updateDisplay()\n  })\n  \n  deleteButton.addEventListener('click', button => {\n    calculator.delete()\n    calculator.updateDisplay()\n  })\n  \n  document.addEventListener('keydown', function (event) {\n    let patternForNumbers = /[0-9]/g;\n    let patternForOperators = /[+\\-*\\/]/g\n    if (event.key.match(patternForNumbers)) {\n      event.preventDefault();\n      calculator.appendNumber(event.key)\n      calculator.updateDisplay()\n    }\n    if (event.key === '.') {\n      event.preventDefault();\n      calculator.appendNumber(event.key)\n      calculator.updateDisplay()\n    }\n    if (event.key.match(patternForOperators)) {\n      event.preventDefault();\n      calculator.chooseOperation(event.key)\n      calculator.updateDisplay()\n    }\n    if (event.key === 'Enter' || event.key === '=') {\n      event.preventDefault();\n      calculator.compute()\n      calculator.updateDisplay()\n    }\n    if (event.key === \"Backspace\") {\n      event.preventDefault();\n      calculator.delete()\n      calculator.updateDisplay()\n    }\n    if (event.key == 'Delete') {\n      event.preventDefault();\n      calculator.clear()\n      calculator.updateDisplay()\n    }\n  \n  });"]},"metadata":{},"sourceType":"module"}