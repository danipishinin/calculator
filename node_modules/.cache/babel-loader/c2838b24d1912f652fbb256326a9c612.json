{"ast":null,"code":"var _jsxFileName = \"/home/misani/calculator/src/main/Calculator.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Calculator.css\";\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  displayValue: \"0\",\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0\n};\nexport default class Calculator extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = { ...initialState\n    };\n  }\n\n  clear() {\n    console.log(\"clear\");\n    this.setState({\n      initialState\n    });\n  }\n\n  setDigit(n) {// const clearDisplay =\n    //   this.state.displayValue === \"0\" || this.state.clearDisplay;\n    // console.log(\"set digit\");\n    // if (n === \".\" && !clearDisplay && this.state.displayValue.includes(\".\"))\n    //   return;\n    // const currentValue = clearDisplay ? \"\" : this.state.displayValue;\n    // const displayValue = currentValue + n;\n    // this.setState({ displayValue, clearDisplay: false });\n    // if (n !== \".\") {\n    //   const newValue = parseFloat(displayValue);\n    //   const values = [...this.state.values];\n    //   values[this.state.current] = newValue;\n    //   this.setState({ values });\n    // }\n  }\n\n  setOperation(operation) {// console.log(\"set op\");\n    // if (this.state.current === 0) {\n    //   this.setState({ operation, current: 1, clearDisplay: true });\n    // } else {\n    //   const equals = operation === \"=\";\n    //   const values = [...this.state.values];\n    //   let displayHistory = \"\";\n    //   try {\n    //     displayHistory = `${values[0]} ${this.state.operation} ${values[1]}`;\n    //     values[0] = eval(`${values[0]} ${this.state.operation} ${values[1]}`);\n    //   } catch (e) {\n    //     values[0] = this.state.values[0];\n    //   }\n    //   values[1] = 0;\n    //   this.setState({\n    //     displayValue: `${values[0]}`,\n    //     displayHistory,\n    //     operation: equals ? null : operation,\n    //     current: equals ? 0 : 1,\n    //     clearDisplay: true,\n    //     values,\n    //   });\n    // }\n  }\n\n  calcular(label) {\n    const botao = label.trim();\n    const classe = itemClass.trim();\n    if (botao === \"AC\") return this.clear;\n  }\n\n  render() {\n    const {\n      buttons\n    } = CalculatorConsts();\n\n    const RenderButtons = () => buttons.map((item, index) => {\n      console.log(item.class, item.label);\n      let click = this.calcular(item.label);\n      return /*#__PURE__*/_jsxDEV(Button, {\n        label: item.label,\n        style: item.class,\n        onClick: () => click\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this);\n    });\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator\",\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        value: this.state.displayValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RenderButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/misani/calculator/src/main/Calculator.jsx"],"names":["React","Component","CalculatorConsts","Button","Display","initialState","displayValue","clearDisplay","operation","values","current","Calculator","state","clear","console","log","setState","setDigit","n","setOperation","calcular","label","botao","trim","classe","itemClass","render","buttons","RenderButtons","map","item","index","class","click"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,kBAAP;AAEA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,+BAApB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,GADK;AAEnBC,EAAAA,YAAY,EAAE,KAFK;AAGnBC,EAAAA,SAAS,EAAE,IAHQ;AAInBC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAJW;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAOA,eAAe,MAAMC,UAAN,SAAyBV,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAChDW,KADgD,GACxC,EAAE,GAAGP;AAAL,KADwC;AAAA;;AAGhDQ,EAAAA,KAAK,GAAG;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEA,SAAKC,QAAL,CAAc;AAAEX,MAAAA;AAAF,KAAd;AACD;;AAEDY,EAAAA,QAAQ,CAACC,CAAD,EAAI,CACV;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,YAAY,CAACX,SAAD,EAAY,CACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDY,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,UAAMC,KAAK,GAAGD,KAAK,CAACE,IAAN,EAAd;AACA,UAAMC,MAAM,GAAGC,SAAS,CAACF,IAAV,EAAf;AACA,QAAID,KAAK,KAAK,IAAd,EAAoB,OAAO,KAAKT,KAAZ;AAErB;;AACDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAczB,gBAAgB,EAApC;;AAEA,UAAM0B,aAAa,GAAG,MACpBD,OAAO,CAACE,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3BjB,MAAAA,OAAO,CAACC,GAAR,CAAYe,IAAI,CAACE,KAAjB,EAAwBF,IAAI,CAACT,KAA7B;AACA,UAAIY,KAAK,GAAG,KAAKb,QAAL,CAAcU,IAAI,CAACT,KAAnB,CAAZ;AACA,0BACE,QAAC,MAAD;AAEE,QAAA,KAAK,EAAES,IAAI,CAACT,KAFd;AAGE,QAAA,KAAK,EAAES,IAAI,CAACE,KAHd;AAIE,QAAA,OAAO,EAAE,MAAMC;AAJjB,SACOF,KADP;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAXD,CADF;;AAcA,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAE,KAAKnB,KAAL,CAAWN;AAA3B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAnF+C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Calculator.css\";\n\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\n\nconst initialState = {\n  displayValue: \"0\",\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0,\n};\nexport default class Calculator extends Component {\n  state = { ...initialState };\n\n  clear() {\n    console.log(\"clear\");\n\n    this.setState({ initialState });\n  }\n\n  setDigit(n) {\n    // const clearDisplay =\n    //   this.state.displayValue === \"0\" || this.state.clearDisplay;\n    // console.log(\"set digit\");\n    // if (n === \".\" && !clearDisplay && this.state.displayValue.includes(\".\"))\n    //   return;\n\n    // const currentValue = clearDisplay ? \"\" : this.state.displayValue;\n    // const displayValue = currentValue + n;\n    // this.setState({ displayValue, clearDisplay: false });\n\n    // if (n !== \".\") {\n    //   const newValue = parseFloat(displayValue);\n    //   const values = [...this.state.values];\n    //   values[this.state.current] = newValue;\n    //   this.setState({ values });\n    // }\n  }\n\n  setOperation(operation) {\n    // console.log(\"set op\");\n    // if (this.state.current === 0) {\n    //   this.setState({ operation, current: 1, clearDisplay: true });\n    // } else {\n    //   const equals = operation === \"=\";\n    //   const values = [...this.state.values];\n    //   let displayHistory = \"\";\n    //   try {\n    //     displayHistory = `${values[0]} ${this.state.operation} ${values[1]}`;\n    //     values[0] = eval(`${values[0]} ${this.state.operation} ${values[1]}`);\n    //   } catch (e) {\n    //     values[0] = this.state.values[0];\n    //   }\n    //   values[1] = 0;\n    //   this.setState({\n    //     displayValue: `${values[0]}`,\n    //     displayHistory,\n    //     operation: equals ? null : operation,\n    //     current: equals ? 0 : 1,\n    //     clearDisplay: true,\n    //     values,\n    //   });\n    // }\n  }\n\n  calcular(label) {\n    const botao = label.trim();\n    const classe = itemClass.trim();\n    if (botao === \"AC\") return this.clear;\n    \n  }\n  render() {\n    const { buttons } = CalculatorConsts();\n\n    const RenderButtons = () =>\n      buttons.map((item, index) => {\n        console.log(item.class, item.label);\n        let click = this.calcular(item.label);\n        return (\n          <Button\n            key={index}\n            label={item.label}\n            style={item.class}\n            onClick={() => click}\n          />\n        );\n      });\n\n    return (\n      <div className='calculator'>\n        <Display value={this.state.displayValue} />\n        <RenderButtons />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}