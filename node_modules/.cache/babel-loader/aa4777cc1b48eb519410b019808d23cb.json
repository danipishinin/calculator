{"ast":null,"code":"var _jsxFileName = \"/home/misani/calculator/src/main/Calculator.jsx\";\n// import React, { Component } from \"react\";\n// import \"./Calculator.css\";\n// import CalculatorConsts from \"../common/consts/calculator.consts\";\n// import Button from \"../components/Button/Button\";\n// import Display from \"../components/Display/Display\";\n// const initialState = {\n//   displayValue: \"0\",\n//   clearDisplay: false,\n//   operation: null,\n//   values: [0, 0],\n//   current: 0,\n// };\n// export default class Calculator extends Component {\n//   state = { ...initialState };\n//   clear() {\n//     this.setState({ initialState });\n//   }\n//   setDigit(n) {\n//     const clearDisplay =\n//       this.state.displayValue === \"0\" || this.state.clearDisplay;\n//     if (n === \".\" && !clearDisplay && this.state.displayValue.includes(\".\"))\n//       return;\n//     const currentValue = clearDisplay ? \"\" : this.state.displayValue;\n//     const displayValue = currentValue + n;\n//     this.setState({ displayValue, clearDisplay: false });\n//     if (n !== \".\") {\n//       const newValue = parseFloat(displayValue);\n//       const values = [...this.state.values];\n//       values[this.state.current] = newValue;\n//       this.setState({ values });\n//     }\n//   }\n//   setOperation(operation) {\n//     if (this.state.current === 0) {\n//       this.setState({ operation, current: 1, clearDisplay: true });\n//     } else {\n//       const equals = operation === \"=\";\n//       const values = [...this.state.values];\n//       let displayHistory = \"\";\n//       try {\n//         displayHistory = `${values[0]} ${this.state.operation} ${values[1]}`;\n//         values[0] = eval(`${values[0]} ${this.state.operation} ${values[1]}`);\n//       } catch (e) {\n//         values[0] = this.state.values[0];\n//       }\n//       values[1] = 0;\n//       this.setState({\n//         displayValue: `${values[0]}`,\n//         displayHistory,\n//         operation: equals ? null : operation,\n//         current: equals ? 0 : 1,\n//         clearDisplay: true,\n//         values,\n//       });\n//     }\n//   }\n//   setMethod(itemClass, label) {\n//     console.log(label)\n//     if (label === \"AC\") return this.clear;\n//     else if (itemClass === \"operation\" || itemClass === \"col4\")\n//       return this.setOperation;\n//     else return this.setDigit;\n//   }\n//   render() {\n//     const { buttons } = CalculatorConsts();\n//     const RenderButtons = () =>\n//       buttons.map((item, index) => {\n//         console.log(item.class, item.label)\n//         let click = this.setMethod(item.class, item.label);\n//         return (\n//           <Button\n//             key={index}\n//             label={item.label}\n//             style={item.class}\n//             onClick={() => click}\n//           />\n//         );\n//       });\n//     return (\n//       <div className='calculator'>\n//         <Display value={this.displayValue} />\n//         <RenderButtons />\n//       </div>\n//     );\n//   }\n// }\nimport React, { Component } from \"react\";\nimport \"./Calculator.css\";\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  displayValue: \"0\",\n  displayHistory: \"\",\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0\n};\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = { ...initialState\n    };\n\n    this.addDigit = n => {\n      const clearDisplay = this.state.displayValue === \"0\" || this.state.clearDisplay;\n      if (n === \".\" && !clearDisplay && this.state.displayValue.includes(\".\")) return;\n      const currentValue = clearDisplay ? \"\" : this.state.displayValue;\n      const displayValue = currentValue + n;\n      this.setState({\n        displayValue,\n        clearDisplay: false\n      });\n\n      if (n !== \".\") {\n        const newValue = parseFloat(displayValue);\n        const values = [...this.state.values];\n        values[this.state.current] = newValue;\n        this.setState({\n          values\n        });\n      }\n    };\n\n    this.clearMemory = () => {\n      this.setState({ ...initialState\n      });\n    };\n\n    this.setOperation = operation => {\n      if (this.state.current === 0) {\n        this.setState({\n          operation,\n          current: 1,\n          clearDisplay: true\n        });\n      } else {\n        const equals = operation === \"=\";\n        const values = [...this.state.values];\n        let displayHistory = \"\";\n\n        try {\n          displayHistory = `${values[0]} ${this.state.operation} ${values[1]}`;\n          values[0] = eval(`${values[0]} ${this.state.operation} ${values[1]}`);\n        } catch (e) {\n          values[0] = this.state.values[0];\n        }\n\n        values[1] = 0;\n        this.setState({\n          displayValue: `${values[0]}`,\n          displayHistory,\n          operation: equals ? null : operation,\n          current: equals ? 0 : 1,\n          clearDisplay: true,\n          values\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      displayValue,\n      displayHistory\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator\",\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        value: this.displayValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"C\",\n        operation: true,\n        double: true,\n        onClick: this.clearMemory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"\\xF7\",\n        operation: true,\n        onClick: () => this.setOperation(\"/\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"x\",\n        operation: true,\n        onClick: () => this.setOperation(\"*\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"7\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"8\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"9\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"-\",\n        operation: true,\n        onClick: this.setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"4\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"5\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"6\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"+\",\n        operation: true,\n        onClick: this.setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"1\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"2\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"3\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"0\",\n        double: true,\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \".\",\n        onClick: this.addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"=\",\n        buttonDoubleHeight: true,\n        equals: true,\n        onClick: this.setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/misani/calculator/src/main/Calculator.jsx"],"names":["React","Component","CalculatorConsts","Button","Display","initialState","displayValue","displayHistory","clearDisplay","operation","values","current","App","state","addDigit","n","includes","currentValue","setState","newValue","parseFloat","clearMemory","setOperation","equals","eval","e","render"],"mappings":"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","sourcesContent":["// import React, { Component } from \"react\";\n\n// import \"./Calculator.css\";\n\n// import CalculatorConsts from \"../common/consts/calculator.consts\";\n// import Button from \"../components/Button/Button\";\n// import Display from \"../components/Display/Display\";\n\n// const initialState = {\n//   displayValue: \"0\",\n//   clearDisplay: false,\n//   operation: null,\n//   values: [0, 0],\n//   current: 0,\n// };\n// export default class Calculator extends Component {\n//   state = { ...initialState };\n\n//   clear() {\n//     this.setState({ initialState });\n//   }\n\n//   setDigit(n) {\n//     const clearDisplay =\n//       this.state.displayValue === \"0\" || this.state.clearDisplay;\n\n//     if (n === \".\" && !clearDisplay && this.state.displayValue.includes(\".\"))\n//       return;\n\n//     const currentValue = clearDisplay ? \"\" : this.state.displayValue;\n//     const displayValue = currentValue + n;\n//     this.setState({ displayValue, clearDisplay: false });\n\n//     if (n !== \".\") {\n//       const newValue = parseFloat(displayValue);\n//       const values = [...this.state.values];\n//       values[this.state.current] = newValue;\n//       this.setState({ values });\n//     }\n//   }\n\n//   setOperation(operation) {\n//     if (this.state.current === 0) {\n//       this.setState({ operation, current: 1, clearDisplay: true });\n//     } else {\n//       const equals = operation === \"=\";\n//       const values = [...this.state.values];\n//       let displayHistory = \"\";\n//       try {\n//         displayHistory = `${values[0]} ${this.state.operation} ${values[1]}`;\n//         values[0] = eval(`${values[0]} ${this.state.operation} ${values[1]}`);\n//       } catch (e) {\n//         values[0] = this.state.values[0];\n//       }\n//       values[1] = 0;\n//       this.setState({\n//         displayValue: `${values[0]}`,\n//         displayHistory,\n//         operation: equals ? null : operation,\n//         current: equals ? 0 : 1,\n//         clearDisplay: true,\n//         values,\n//       });\n//     }\n//   }\n\n//   setMethod(itemClass, label) {\n//     console.log(label)\n//     if (label === \"AC\") return this.clear;\n//     else if (itemClass === \"operation\" || itemClass === \"col4\")\n//       return this.setOperation;\n//     else return this.setDigit;\n//   }\n//   render() {\n//     const { buttons } = CalculatorConsts();\n\n//     const RenderButtons = () =>\n//       buttons.map((item, index) => {\n//         console.log(item.class, item.label)\n//         let click = this.setMethod(item.class, item.label);\n//         return (\n//           <Button\n//             key={index}\n//             label={item.label}\n//             style={item.class}\n//             onClick={() => click}\n//           />\n//         );\n//       });\n\n//     return (\n//       <div className='calculator'>\n//         <Display value={this.displayValue} />\n//         <RenderButtons />\n//       </div>\n//     );\n//   }\n// }\n\nimport React, { Component } from \"react\";\nimport \"./Calculator.css\";\n\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\n\nconst initialState = {\n  displayValue: \"0\",\n  displayHistory: \"\",\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0,\n};\n\nexport default class App extends Component {\n  state = { ...initialState };\n\n  addDigit = (n) => {\n    const clearDisplay =\n      this.state.displayValue === \"0\" || this.state.clearDisplay;\n\n    if (n === \".\" && !clearDisplay && this.state.displayValue.includes(\".\"))\n      return;\n\n    const currentValue = clearDisplay ? \"\" : this.state.displayValue;\n    const displayValue = currentValue + n;\n    this.setState({ displayValue, clearDisplay: false });\n\n    if (n !== \".\") {\n      const newValue = parseFloat(displayValue);\n      const values = [...this.state.values];\n      values[this.state.current] = newValue;\n      this.setState({ values });\n    }\n  };\n\n  clearMemory = () => {\n    this.setState({ ...initialState });\n  };\n\n  setOperation = (operation) => {\n    if (this.state.current === 0) {\n      this.setState({ operation, current: 1, clearDisplay: true });\n    } else {\n      const equals = operation === \"=\";\n      const values = [...this.state.values];\n      let displayHistory = \"\";\n      try {\n        displayHistory = `${values[0]} ${this.state.operation} ${values[1]}`;\n        values[0] = eval(`${values[0]} ${this.state.operation} ${values[1]}`);\n      } catch (e) {\n        values[0] = this.state.values[0];\n      }\n      values[1] = 0;\n      this.setState({\n        displayValue: `${values[0]}`,\n        displayHistory,\n        operation: equals ? null : operation,\n        current: equals ? 0 : 1,\n        clearDisplay: true,\n        values,\n      });\n    }\n  };\n\n  render() {\n    const { displayValue, displayHistory } = this.state;\n    return (\n      <div className='calculator'>\n        <Display value={this.displayValue} />\n        <Button label='C' operation double onClick={this.clearMemory} />\n        <Button label='÷' operation onClick={() => this.setOperation(\"/\")} />\n        <Button label='x' operation onClick={() => this.setOperation(\"*\")} />\n        <Button label='7' onClick={this.addDigit} />\n        <Button label='8' onClick={this.addDigit} />\n        <Button label='9' onClick={this.addDigit} />\n        <Button label='-' operation onClick={this.setOperation} />\n        <Button label='4' onClick={this.addDigit} />\n        <Button label='5' onClick={this.addDigit} />\n        <Button label='6' onClick={this.addDigit} />\n        <Button label='+' operation onClick={this.setOperation} />\n        <Button label='1' onClick={this.addDigit} />\n        <Button label='2' onClick={this.addDigit} />\n        <Button label='3' onClick={this.addDigit} />\n        <Button label='0' double onClick={this.addDigit} />\n        <Button label='.' onClick={this.addDigit} />\n        <Button\n          label='='\n          buttonDoubleHeight\n          equals\n          onClick={this.setOperation}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}