{"ast":null,"code":"var _jsxFileName = \"/home/misani/calculator/src/main/Calculator.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Calculator.css\";\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  displayValue: \"0\",\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0\n};\nexport default class Calculator extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = { ...initialState\n    };\n  }\n\n  setOperation(operation) {\n    if (this.state.current === 0) {\n      this.setState({\n        operation,\n        current: 1,\n        clearDisplay: true\n      });\n    } else {\n      const equals = operation === '=';\n      const currentOperation = this.state.operation;\n      const values = { ...this.state.values\n      };\n\n      try {\n        values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`);\n      } catch (e) {\n        values[0] = this.state.values[0];\n      }\n\n      values[1] = 0;\n      this.setState({\n        displayValue: values[0],\n        operation: equals ? null : operation,\n        current: equals ? 0 : 1,\n        clearDisplay: !equals,\n        values\n      });\n    }\n  }\n\n  setNumber(n) {\n    if (n === '.' && this.state.displayValue.includes('.')) {\n      return;\n    }\n\n    const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay;\n    const currentValue = clearDisplay ? '' : this.state.displayValue;\n    const displayValue = currentValue + n;\n    this.setState({\n      displayValue,\n      clearDisplay: false\n    });\n\n    if (n !== '.') {\n      const i = this.state.current;\n      const newValue = parseFloat(displayValue);\n      const values = { ...this.state.values\n      };\n      values[i] = newValue;\n      this.setState({\n        values\n      });\n    }\n  }\n\n  clearMemory() {\n    this.setState({ ...initialState\n    });\n  }\n\n  render() {\n    const {\n      buttons\n    } = CalculatorConsts();\n\n    const RenderButtons = () => buttons.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        label: item.label,\n        style: item.class\n      }, item.index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this);\n    });\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator\",\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        value: this.displayValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RenderButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/misani/calculator/src/main/Calculator.jsx"],"names":["React","Component","CalculatorConsts","Button","Display","initialState","displayValue","clearDisplay","operation","values","current","Calculator","state","setOperation","setState","equals","currentOperation","eval","e","setNumber","n","includes","currentValue","i","newValue","parseFloat","clearMemory","render","buttons","RenderButtons","map","item","index","label","class"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Calculator.css\";\n\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\n\nconst initialState = {\n  displayValue: \"0\",\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0\n};\nexport default class Calculator extends Component {\n\n  state = {...initialState}\n\n\n  setOperation(operation) {\n    if(this.state.current === 0) {\n        this.setState({\n            operation, current: 1, clearDisplay: true\n        })\n    } else {\n        const equals = operation === '='\n        const currentOperation = this.state.operation\n\n        const values = { ...this.state.values }\n\n        try {\n            values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\n        } catch(e) {\n            values[0] = this.state.values[0]\n        }\n        values[1] = 0\n\n        this.setState({\n            displayValue: values[0],\n            operation: equals ? null : operation,\n            current: equals ? 0 : 1,\n            clearDisplay: !equals,\n            values\n        })\n    }\n}\n\nsetNumber(n) {\n    if(n === '.' && this.state.displayValue.includes('.')) {\n        return\n    }\n\n    const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\n\n    const currentValue = clearDisplay ? '' : this.state.displayValue\n\n    const displayValue = currentValue + n\n\n    this.setState({ displayValue, clearDisplay: false })\n\n    if(n !== '.') {\n        const i = this.state.current\n        const newValue = parseFloat(displayValue)\n        const values = { ...this.state.values }\n        values[i] = newValue\n\n        this.setState({ values })\n    }\n}\n\n  clearMemory() {\n    this.setState({...initialState})\n  }\n\n  render() {\n    const { buttons } = CalculatorConsts();\n\n    const RenderButtons = () =>\n      buttons.map((item, index) => {\n        return (\n          <Button key={item.index} label={item.label} style={item.class} />\n        );\n      });\n\n    return (\n      <div className='calculator'>\n        <Display value={this.displayValue} />\n        <RenderButtons />\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}