{"ast":null,"code":"var _jsxFileName = \"/home/misani/calculator/src/main/Calculator.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Calculator.css\";\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  displayValue: '0',\n  clearDisplay: false,\n  operation: null,\n  valores: [0, 0],\n  current: 0\n};\nexport default class Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...initialState\n    };\n    this.clearMemory = this.clearMemory.bind(this);\n    this.setOperation = this.setOperation.bind(this);\n    this.addDigit = this.addDigit.bind(this);\n  }\n\n  clearMemory() {\n    console.log('clear');\n    this.setState({ ...initialState\n    });\n  }\n\n  setOperation(operation) {\n    if (this.state.current === 0) {\n      this.setState({\n        operation,\n        current: 1,\n        clearDisplay: true\n      });\n    } else {\n      const equals = operation === '=';\n      const currentOperation = this.state.operation;\n      const values = { ...this.state.values\n      };\n\n      try {\n        values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`);\n      } catch (e) {\n        values[0] = this.state.values[0];\n      }\n\n      values[1] = 0;\n      this.setState({\n        displayValue: values[0],\n        operation: equals ? null : operation,\n        current: equals ? 0 : 1,\n        clearDisplay: !equals,\n        values\n      });\n    }\n  }\n\n  addDigit(n) {\n    if (n === '.' && this.state.displayValue.includes('.')) {\n      return;\n    }\n\n    const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay;\n    const currentValue = clearDisplay ? '' : this.state.displayValue;\n    const displayValue = currentValue + n;\n    this.setState({\n      displayValue,\n      clearDisplay: false\n    });\n\n    if (n !== '.') {\n      const i = this.state.current;\n      const newValue = parseFloat(displayValue);\n      const values = { ...this.state.values\n      };\n      values[i] = newValue;\n      this.setState({\n        values\n      });\n    }\n  }\n\n  calcular(label, classe) {\n    console.log('CALCULAR');\n    const botao = label.trim();\n    const operador = classe.trim();\n    console.log(botao);\n    console.log(operador);\n    if (operador === \"AC\") return this.clearMemory;else if (classe === \"operation\") this.setOperation(botao);else this.addDigit(botao);\n  }\n\n  render() {\n    const {\n      buttons\n    } = CalculatorConsts();\n\n    const RenderButtons = () => buttons.map((item, index) => {\n      console.log(item.class, item.label);\n      return /*#__PURE__*/_jsxDEV(Button, {\n        label: item.label,\n        style: item.class,\n        onClick: () => this.calcular(item.label, item.class)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this);\n    });\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator\",\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        value: this.state.displayValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RenderButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/misani/calculator/src/main/Calculator.jsx"],"names":["React","Component","CalculatorConsts","Button","Display","initialState","displayValue","clearDisplay","operation","valores","current","Calculator","constructor","props","state","clearMemory","bind","setOperation","addDigit","console","log","setState","equals","currentOperation","values","eval","e","n","includes","currentValue","i","newValue","parseFloat","calcular","label","classe","botao","trim","operador","render","buttons","RenderButtons","map","item","index","class"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,kBAAP;AAEA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,+BAApB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,GADK;AAEnBC,EAAAA,YAAY,EAAE,KAFK;AAGnBC,EAAAA,SAAS,EAAE,IAHQ;AAInBC,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,CAJU;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAOA,eAAe,MAAMC,UAAN,SAAyBV,SAAzB,CAAmC;AAIhDW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAFnBC,KAEmB,GAFX,EAAE,GAAGT;AAAL,KAEW;AAEf,SAAKU,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDD,EAAAA,WAAW,GAAG;AACVI,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,SAAKC,QAAL,CAAc,EAAE,GAAGhB;AAAL,KAAd;AACH;;AAEDY,EAAAA,YAAY,CAACT,SAAD,EAAY;AACpB,QAAG,KAAKM,KAAL,CAAWJ,OAAX,KAAuB,CAA1B,EAA6B;AACzB,WAAKW,QAAL,CAAc;AACVb,QAAAA,SADU;AACCE,QAAAA,OAAO,EAAE,CADV;AACaH,QAAAA,YAAY,EAAE;AAD3B,OAAd;AAGH,KAJD,MAIO;AACH,YAAMe,MAAM,GAAGd,SAAS,KAAK,GAA7B;AACA,YAAMe,gBAAgB,GAAG,KAAKT,KAAL,CAAWN,SAApC;AAEA,YAAMgB,MAAM,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAf;;AAEA,UAAI;AACAA,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAYC,IAAI,CAAE,GAAED,MAAM,CAAC,CAAD,CAAI,IAAGD,gBAAiB,IAAGC,MAAM,CAAC,CAAD,CAAI,EAA/C,CAAhB;AACH,OAFD,CAEE,OAAME,CAAN,EAAS;AACPF,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAKV,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAAZ;AACH;;AACDA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AAEA,WAAKH,QAAL,CAAc;AACVf,QAAAA,YAAY,EAAEkB,MAAM,CAAC,CAAD,CADV;AAEVhB,QAAAA,SAAS,EAAEc,MAAM,GAAG,IAAH,GAAUd,SAFjB;AAGVE,QAAAA,OAAO,EAAEY,MAAM,GAAG,CAAH,GAAO,CAHZ;AAIVf,QAAAA,YAAY,EAAE,CAACe,MAJL;AAKVE,QAAAA;AALU,OAAd;AAOH;AACJ;;AAEDN,EAAAA,QAAQ,CAACS,CAAD,EAAI;AACR,QAAGA,CAAC,KAAK,GAAN,IAAa,KAAKb,KAAL,CAAWR,YAAX,CAAwBsB,QAAxB,CAAiC,GAAjC,CAAhB,EAAuD;AACnD;AACH;;AAED,UAAMrB,YAAY,GAAG,KAAKO,KAAL,CAAWR,YAAX,KAA4B,GAA5B,IAAmC,KAAKQ,KAAL,CAAWP,YAAnE;AAEA,UAAMsB,YAAY,GAAGtB,YAAY,GAAG,EAAH,GAAQ,KAAKO,KAAL,CAAWR,YAApD;AAEA,UAAMA,YAAY,GAAGuB,YAAY,GAAGF,CAApC;AAEA,SAAKN,QAAL,CAAc;AAAEf,MAAAA,YAAF;AAAgBC,MAAAA,YAAY,EAAE;AAA9B,KAAd;;AAEA,QAAGoB,CAAC,KAAK,GAAT,EAAc;AACV,YAAMG,CAAC,GAAG,KAAKhB,KAAL,CAAWJ,OAArB;AACA,YAAMqB,QAAQ,GAAGC,UAAU,CAAC1B,YAAD,CAA3B;AACA,YAAMkB,MAAM,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAf;AACAA,MAAAA,MAAM,CAACM,CAAD,CAAN,GAAYC,QAAZ;AAEA,WAAKV,QAAL,CAAc;AAAEG,QAAAA;AAAF,OAAd;AACH;AACJ;;AAEDS,EAAAA,QAAQ,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMgB,KAAK,GAAGF,KAAK,CAACG,IAAN,EAAd;AACA,UAAMC,QAAQ,GAAGH,MAAM,CAACE,IAAP,EAAjB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,QAAZ;AACA,QAAIA,QAAQ,KAAK,IAAjB,EAAuB,OAAO,KAAKvB,WAAZ,CAAvB,KACK,IAAIoB,MAAM,KAAK,WAAf,EACH,KAAKlB,YAAL,CAAkBmB,KAAlB,EADG,KAIH,KAAKlB,QAAL,CAAckB,KAAd;AAGH;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAActC,gBAAgB,EAApC;;AAEA,UAAMuC,aAAa,GAAG,MACpBD,OAAO,CAACE,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3BzB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,IAAI,CAACE,KAAjB,EAAwBF,IAAI,CAACT,KAA7B;AACA,0BACE,QAAC,MAAD;AAEE,QAAA,KAAK,EAAES,IAAI,CAACT,KAFd;AAGE,QAAA,KAAK,EAAES,IAAI,CAACE,KAHd;AAIE,QAAA,OAAO,EAAE,MAAM,KAAKZ,QAAL,CAAcU,IAAI,CAACT,KAAnB,EAA0BS,IAAI,CAACE,KAA/B;AAJjB,SACOD,KADP;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAVD,CADF;;AAaA,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWR;AAA3B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAzG+C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Calculator.css\";\n\nimport CalculatorConsts from \"../common/consts/calculator.consts\";\nimport Button from \"../components/Button/Button\";\nimport Display from \"../components/Display/Display\";\n\nconst initialState = {\n  displayValue: '0',\n  clearDisplay: false,\n  operation: null,\n  valores: [0, 0],\n  current: 0\n}\nexport default class Calculator extends Component {\n\n  state = { ...initialState }\n\n  constructor(props) {\n      super(props)\n      this.clearMemory = this.clearMemory.bind(this)\n      this.setOperation = this.setOperation.bind(this)\n      this.addDigit = this.addDigit.bind(this)\n  }\n\n  clearMemory() {\n      console.log('clear')\n      this.setState({ ...initialState })\n  }\n\n  setOperation(operation) {\n      if(this.state.current === 0) {\n          this.setState({\n              operation, current: 1, clearDisplay: true\n          })\n      } else {\n          const equals = operation === '='\n          const currentOperation = this.state.operation\n\n          const values = { ...this.state.values }\n\n          try {\n              values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\n          } catch(e) {\n              values[0] = this.state.values[0]\n          }\n          values[1] = 0\n\n          this.setState({\n              displayValue: values[0],\n              operation: equals ? null : operation,\n              current: equals ? 0 : 1,\n              clearDisplay: !equals,\n              values\n          })\n      }\n  }\n\n  addDigit(n) {\n      if(n === '.' && this.state.displayValue.includes('.')) {\n          return\n      }\n\n      const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\n\n      const currentValue = clearDisplay ? '' : this.state.displayValue\n\n      const displayValue = currentValue + n\n\n      this.setState({ displayValue, clearDisplay: false })\n\n      if(n !== '.') {\n          const i = this.state.current\n          const newValue = parseFloat(displayValue)\n          const values = { ...this.state.values }\n          values[i] = newValue\n\n          this.setState({ values })\n      }\n  }\n\n  calcular(label, classe) {\n    console.log('CALCULAR')\n    const botao = label.trim();\n    const operador = classe.trim();\n    console.log(botao)\n    console.log(operador)\n    if (operador === \"AC\") return this.clearMemory;\n    else if (classe === \"operation\") \n      this.setOperation(botao)\n    \n    else \n      this.addDigit(botao)\n     \n    \n  }\n\n  render() {\n    const { buttons } = CalculatorConsts();\n\n    const RenderButtons = () =>\n      buttons.map((item, index) => {\n        console.log(item.class, item.label);\n        return (\n          <Button\n            key={index}\n            label={item.label}\n            style={item.class}\n            onClick={() => this.calcular(item.label, item.class)}\n          />\n        );\n      });\n\n    return (\n      <div className='calculator'>\n        <Display value={this.state.displayValue} />\n        <RenderButtons />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}